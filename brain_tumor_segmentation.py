# -*- coding: utf-8 -*-
"""Brain Tumor Segmentation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lo3BV5l63Nq5YKV_i1drNeo0NanDBj45

# <b>Category B: Intermediate</b>
## <b>Task 01: Brain Tumor Segmentation with YOLO 11 and SAM2</b>
This project involves using advanced computer vision techniques to perform brain tumor
segmentation using YOLO 11 and SAM2 models.

<b>Overview:</b>

• YOLO 11 - A state-of-the-art real-time object detection model that identifies multiple objects in an image with high speed and accuracy.

• SAM2 (Segment Anything Model 2) - A segmentation model designed for precise
object separation in an image.

• Segmentation - The process of partitioning an image into meaningful regions to
detect and analyze objects.

## Installing Required Libraries
"""

!pip install ultralytics
!pip install roboflow

"""## Importing Required Libraries"""

from ultralytics import YOLO
from ultralytics import SAM
from roboflow import Roboflow
from google.colab import userdata
import os
# from PIL import Image

"""## Importing Data"""

rf = Roboflow(api_key=userdata.get('RoboflowAPI'))
project = rf.workspace("brain-tumor-jolxi").project("brain-tumor-detection-o0ggc")
version = project.version(2)
dataset = version.download("yolov11")

"""## Defining Model"""

yolo_model = YOLO("yolo11n.pt")
sam_model = SAM("sam2_b.pt")

"""## Training Model"""

data_path = "/content/brain-tumor-detection-2/data.yaml" # Replace the path with your actual data path
if os.path.exists(data_path):
  print("Data path exists. proceeding...")
else:
  print("Data path does not exist.")
trainResults = yolo_model.train(
    data = data_path,
    epochs = 20,
    imgsz = 640, # Set the image size according your data
    device = "0" # Replace 0 with cpu if GPU is not available
)

"""## Loading the Trained Model"""

yolo_model = YOLO("/content/runs/detect/train/weights/best.pt")

results = yolo_model("/content/brain-tumor-detection-2/test/images/Brain-Tumor-Overview_mp4-0474_jpg.rf.6ad8c1d252799c1566a203ce25f3dd35.jpg")
results[0].show()

for result in results:
  class_ids = result.boxes.cls.int().tolist()
  if len(class_ids):
    boxes = result.boxes.xyxy
    sam_results = sam_model(result.orig_img, bboxes=boxes, verbose=False, device="cpu", save=True, show=False)

